diff --git a/vendor/amasty/module-extra-fee/Plugin/Paypal/Braintree/Request/Level23ProcessingDataBuilderPlugin.php b/vendor/amasty/module-extra-fee/Plugin/Paypal/Braintree/Request/Level23ProcessingDataBuilderPlugin.php
new file mode 100644
index 0000000..9e929ce
--- /dev/null
+++ b/vendor/amasty/module-extra-fee/Plugin/Paypal/Braintree/Request/Level23ProcessingDataBuilderPlugin.php
@@ -0,0 +1,75 @@
+<?php
+
+namespace Amasty\Extrafee\Plugin\Paypal\Braintree\Request;
+
+use Braintree\TransactionLineItem;
+use Magento\Quote\Model\QuoteRepository;
+use PayPal\Braintree\Gateway\Request\Level23ProcessingDataBuilder;
+use PayPal\Braintree\Gateway\Helper\SubjectReader;
+
+class Level23ProcessingDataBuilderPlugin
+{
+    /**
+     * @var SubjectReader
+     */
+    private SubjectReader $subjectReader;
+
+    /**
+     * @var quoteRepository
+     */
+    private QuoteRepository $quoteRepository;
+
+    public function __construct(
+        SubjectReader $subjectReader,
+        QuoteRepository $quoteRepository
+    ) {
+        $this->subjectReader = $subjectReader;
+        $this->quoteRepository = $quoteRepository;
+    }
+
+    /**
+     * @param Level23ProcessingDataBuilder $subject
+     * @param array $result
+     * @param array $buildSubject
+     * @return array
+     */
+    public function afterBuild(
+        Level23ProcessingDataBuilder $subject,
+                                     $result,
+                                     $buildSubject
+    ) {
+        $paymentDO = $this->subjectReader->readPayment($buildSubject);
+        $order = $paymentDO->getOrder();
+        $quote = $this->quoteRepository->get($order->getQuoteId());
+
+        if (array_key_exists('amasty_extrafee', $quote->getTotals())) {
+            $extraFee = $this->numberToString($quote->getTotals()['amasty_extrafee']->getValue(), 2);
+            $extraFeeLineItem = [
+                'name' => 'Amasty Extra Fee for Order',
+                'kind' => TransactionLineItem::DEBIT,
+                'quantity' => 1.00,
+                'unitAmount' => $extraFee,
+                'totalAmount' => $extraFee
+            ];
+
+            $result['lineItems'][] = $extraFeeLineItem;
+        }
+
+        return $result;
+    }
+
+    /**
+     * @param float $num
+     * @param int $precision
+     * @return string
+     */
+    private function numberToString($num, int $precision): string
+    {
+        // To counter the fact that Magento often wrongly returns a sting for price values, we can cast it to a float.
+        if (is_string($num)) {
+            $num = (float) $num;
+        }
+
+        return (string) round($num, $precision);
+    }
+}
\ No newline at end of file
diff --git a/vendor/amasty/module-extra-fee/etc/di.xml b/vendor/amasty/module-extra-fee/etc/di.xml
index 59a5197..7e594b7 100644
--- a/vendor/amasty/module-extra-fee/etc/di.xml
+++ b/vendor/amasty/module-extra-fee/etc/di.xml
@@ -92,4 +92,7 @@
         <plugin name="Amasty_ExtraFee::PaypalReturn" type="Amasty\Extrafee\Plugin\Paypal\Model\Express\CheckoutPlugin" />
     </type>
 
+    <type name="PayPal\Braintree\Gateway\Request\Level23ProcessingDataBuilder">
+        <plugin name="Amasty_ExtraFee::SetLineItemsForPaypalBraintree" type="Amasty\Extrafee\Plugin\Paypal\Braintree\Request\Level23ProcessingDataBuilderPlugin" />
+    </type>
 </config>
diff --git a/vendor/amasty/module-extra-fee/view/frontend/requirejs-config.js b/vendor/amasty/module-extra-fee/view/frontend/requirejs-config.js
index 17fd0e6..0158ca8 100644
--- a/vendor/amasty/module-extra-fee/view/frontend/requirejs-config.js
+++ b/vendor/amasty/module-extra-fee/view/frontend/requirejs-config.js
@@ -9,6 +9,12 @@ var config = {
             },
             'Magento_Checkout/js/view/payment/default': {
                 'Amasty_Extrafee/js/view/payment/default-mixin': true
+            },
+            'PayPal_Braintree/js/view/payment/method-renderer/paypal': {
+                'Amasty_Extrafee/js/view/payment/method-renderer/paypal-mixin': true
+            },
+            'Klarna_Kp/js/view/payments/kp': {
+                'Amasty_Extrafee/js/view/payment/kp-mixin': true
             }
         }
     }
diff --git a/vendor/amasty/module-extra-fee/view/frontend/web/js/view/payment/kp-mixin.js b/vendor/amasty/module-extra-fee/view/frontend/web/js/view/payment/kp-mixin.js
new file mode 100644
index 0000000..af52f60
--- /dev/null
+++ b/vendor/amasty/module-extra-fee/view/frontend/web/js/view/payment/kp-mixin.js
@@ -0,0 +1,41 @@
+define([
+    'mage/storage',
+    'Magento_Checkout/js/model/quote',
+    'Klarna_Kp/js/model/config'
+], function (
+    storage,
+    quote,
+    klarnaConfig
+) {
+    'use strict';
+
+    var mixin = {
+        /**
+         * Reload Klarna config before place order
+         */
+        authorize: function () {
+            var _super = this._super.bind(this);
+            var extraFee = quote.totals().total_segments.find(function (elem) {
+                return elem.code === "amasty_extrafee"
+            })
+
+            if (extraFee.value > 0) {
+                var ajax_params = {
+                    shipping_country_id: quote.shippingAddress() ? quote.shippingAddress().countryId : '',
+                    shipping_company: quote.shippingAddress() ? quote.shippingAddress().company : '',
+                    billing_country_id: quote.billingAddress() ? quote.billingAddress().countryId : '',
+                    billing_company: quote.billingAddress() ? quote.billingAddress().company : '',
+                };
+
+                storage.post(klarnaConfig.reloadConfigUrl, JSON.stringify(ajax_params), false, 'application/json')
+                    .done(function (result) {
+                        _super();
+                    });
+            }
+        },
+    };
+
+    return function (target) {
+        return target.extend(mixin);
+    };
+});
\ No newline at end of file
diff --git a/vendor/amasty/module-extra-fee/view/frontend/web/js/view/payment/method-renderer/paypal-mixin.js b/vendor/amasty/module-extra-fee/view/frontend/web/js/view/payment/method-renderer/paypal-mixin.js
new file mode 100644
index 0000000..43b89fb
--- /dev/null
+++ b/vendor/amasty/module-extra-fee/view/frontend/web/js/view/payment/method-renderer/paypal-mixin.js
@@ -0,0 +1,42 @@
+
+define([
+    'braintreeCheckoutPayPalAdapter',
+    'Magento_Checkout/js/model/quote'
+], function (
+    Braintree,
+    quote
+) {
+    'use strict';
+
+    var mixin = {
+        /**
+         * Prepare line item data to load paypal button
+         */
+        loadPayPalButton: function (paypalCheckoutInstance, funding) {
+            var paypalPayment = Braintree.config.paypal;
+            var extraFee = quote.totals().total_segments.find(function (elem) {
+                return elem.code === "amasty_extrafee"
+            })
+            var extraFeeLineItem = paypalPayment.lineItems.find(function (elem) {
+                return elem.name === "Amasty Extra Fee"
+            })
+
+            if (extraFee && !extraFeeLineItem) {
+                var lineItem = {
+                    kind: "debit",
+                    name: "Amasty Extra Fee",
+                    quantity: 1,
+                    unitAmount: extraFee.value
+                }
+
+                paypalPayment.lineItems.push(lineItem);
+            }
+
+            this._super(paypalCheckoutInstance, funding);
+        },
+    };
+
+    return function (target) {
+        return target.extend(mixin);
+    };
+});
\ No newline at end of file
