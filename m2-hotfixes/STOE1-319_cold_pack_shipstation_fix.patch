diff --git a/vendor/auctane/api/Model/Action/Export.php b/vendor/auctane/api/Model/Action/Export.php
index 3cdba715f..f4c7b2e07 100644
--- a/vendor/auctane/api/Model/Action/Export.php
+++ b/vendor/auctane/api/Model/Action/Export.php
@@ -22,6 +22,7 @@
 use Magento\Sales\Model\ResourceModel\Order\Collection;
 use Magento\Sales\Model\ResourceModel\Order\CollectionFactory;
 use Magento\Store\Model\ScopeInterface;
+use Amasty\Extrafee\Model\ResourceModel\ExtrafeeOrder\Collection as ExtraFee;
 
 
 /**
@@ -40,6 +41,10 @@
      */
     const EXPORT_SIZE = '100';
 
+    const COLD_PACK_MESSAGE = 'COLDPACK SELECTED';
+
+    const COLD_PACK_SKU = 'CP';
+
 
     /**
      * Scope config
@@ -112,6 +117,9 @@
     /** @var RegionCollectionFactory */
     private $regionCollectionFactory;
 
+    /** @var ExtraFee */
+    private $extraFee;
+
     /**
      * Export class constructor
      *
@@ -122,6 +130,8 @@
      * @param Message $giftMessage The gift message.
      * @param WeightAdapter $weightAdapter
      * @param RegionCollectionFactory $regionCollectionFactory
+     * @param ExtraFee $extraFee
+     *
      */
     public function __construct(
         CollectionFactory $orderCollectionFactory,
@@ -130,7 +140,8 @@
         Data $dataHelper,
         Message $giftMessage,
         WeightAdapter $weightAdapter,
-        RegionCollectionFactory $regionCollectionFactory
+        RegionCollectionFactory $regionCollectionFactory,
+        ExtraFee $extraFee
     )
     {
         $this->_scopeConfig = $scopeConfig;
@@ -155,6 +166,7 @@
         //Check for the import child items for the bundle product
         $attributes = 'shipstation_general/shipstation/attribute';
         $this->_attributes = $this->_scopeConfig->getValue($attributes, ScopeInterface::SCOPE_STORE);
+        $this->_extraFee = $extraFee;
     }
 
     /**
@@ -215,6 +227,11 @@
 
         /** @var Order $order */
         foreach ($orders as $order) {
+            $this->_extraFee->clear()->getSelect()->reset('where');
+            $cpFee = $this->_extraFee->addFilterByOrderId($order->getEntityId())->getFirstItem();
+            if (($cpFee && $cpFee->getDataByKey('total_amount') > 0) || $this->checkOrderItemsForColdPack($order)) {
+                $order->setData('customer_note', self::COLD_PACK_MESSAGE);
+            }
             $this->writeOrderXml($order);
         }
 
@@ -228,7 +245,7 @@
      * @param Order $order
      * @return $this
      */
-    private function writeOrderXml(Order $order): self
+    private function writeOrderXml(Order $order, $cpFee = null): self
     {
         $this->_xmlData .= "\t<Order>\n";
         $this->addXmlElement("OrderNumber", "<![CDATA[{$order->getIncrementId()}]]>");
@@ -258,6 +275,14 @@
         $this->_getInternalNotes($order);
         $this->addXmlElement("StoreCode", "<![CDATA[{$order->getStore()->getCode()}]]>");
 
+        try {
+            $this->addXmlElement("CustomField1", $cpFee->getTotalAmount() ?? '0.00');
+        } catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
+            $this->addXmlElement("CustomField1", '0.00');
+        } catch (\Error $e) {
+            $this->addXmlElement("CustomField1", '0.00');
+        }
+
         $this->_getGiftMessageInfo($order);
 
         $this->_xmlData .= "\t<Customer>\n";
@@ -630,4 +655,20 @@
         $this->addXmlElement("UnitPrice", "<![CDATA[{$order->getDiscountAmount()}]]>");
         $this->_xmlData .= "\t</Item>\n";
     }
+
+    /**
+     * Reviews order items purchased and looks for the presence of a cold pack item
+     * @param $order
+     * @return bool
+     */
+    private function checkOrderItemsForColdPack($order): bool
+    {
+        foreach ($order->getItems() as $item) {
+            if ($item->getSku() != self::COLD_PACK_SKU) {
+                continue;
+            }
+            return true;
+        }
+        return false;
+    }
 }
