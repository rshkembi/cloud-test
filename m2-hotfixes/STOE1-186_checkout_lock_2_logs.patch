diff --git a/vendor/magento/module-quote/Model/QuoteManagement.php b/vendor/magento/module-quote/Model/QuoteManagement.php
index 8204156867..9fdc0da1da 100644
--- a/vendor/magento/module-quote/Model/QuoteManagement.php
+++ b/vendor/magento/module-quote/Model/QuoteManagement.php
@@ -542,10 +542,18 @@
      */
     protected function submitQuote(QuoteEntity $quote, $orderData = [])
     {
+        $writer = new \Zend_Log_Writer_Stream(BP . '/var/log/order-process.log');
+        $logger = new \Zend_Log();
+        $logger->addWriter($writer);
+
+        $logger->info('New quote submitted for order. Quote: '.$quote->getId());
+
         $order = $this->orderFactory->create();
         $this->submitQuoteValidator->validateQuote($quote);
         if (!$quote->getCustomerIsGuest()) {
+            $logger->info('Quote: '.$quote->getId().'. Customer is logged in.');
             if ($quote->getCustomerId()) {
+                $logger->info('Quote: '.$quote->getId().'. Customer ID: '.$quote->getCustomerId());
                 $this->_prepareCustomerQuote($quote);
                 $this->customerManagement->validateAddresses($quote);
             }
@@ -553,13 +561,16 @@
         }
         $addresses = [];
         $quote->reserveOrderId();
+        $logger->info('Quote: '.$quote->getId().'. Quote is being reserved');
         if ($quote->isVirtual()) {
+            $logger->info('Quote: '.$quote->getId().'. Quote is virtual');
             $this->dataObjectHelper->mergeDataObjects(
                 OrderInterface::class,
                 $order,
                 $this->quoteAddressToOrder->convert($quote->getBillingAddress(), $orderData)
             );
         } else {
+            $logger->info('Quote: '.$quote->getId().'. Quote is not virtual');
             $this->dataObjectHelper->mergeDataObjects(
                 OrderInterface::class,
                 $order,
@@ -584,6 +595,7 @@
                 'email' => $quote->getCustomerEmail()
             ]
         );
+        $logger->info('Quote: '.$quote->getId().'. Billing information are set');
         $billingAddress->setData('quote_address_id', $quote->getBillingAddress()->getId());
         $addresses[] = $billingAddress;
         $order->setBillingAddress($billingAddress);
@@ -591,6 +603,7 @@
         $order->setPayment($this->quotePaymentToOrderPayment->convert($quote->getPayment()));
         $order->setItems($this->resolveItems($quote));
         if ($quote->getCustomer()) {
+            $logger->info('Quote: '.$quote->getId().'. Customer '.$quote->getCustomer()->getId().' is saved to order');
             $order->setCustomerId($quote->getCustomer()->getId());
         }
         $order->setQuoteId($quote->getId());
@@ -598,10 +611,13 @@
         $order->setCustomerFirstname($quote->getCustomerFirstname());
         $order->setCustomerMiddlename($quote->getCustomerMiddlename());
         $order->setCustomerLastname($quote->getCustomerLastname());
+        $logger->info('Quote: '.$quote->getId().'. Customer information is saved to order');
         if ($quote->getOrigOrderId()) {
+            $logger->info('Quote: '.$quote->getId().'. Entity ID is set to '.$quote->getOrigOrderId());
             $order->setEntityId($quote->getOrigOrderId());
         }
         if ($quote->getReservedOrderId()) {
+            $logger->info('Quote: '.$quote->getId().'. Reserved order ID is set to '.$quote->getReservedOrderId());
             $order->setIncrementId($quote->getReservedOrderId());
         }
         $this->submitQuoteValidator->validateOrder($order);
@@ -612,14 +628,17 @@
                 'quote' => $quote
             ]
         );
+        $logger->info('Quote: '.$quote->getId().' Order validation is complete');
 
         $lockedName = self::LOCK_PREFIX . $quote->getId();
         if ($this->lockManager->isLocked($lockedName)) {
+            $logger->info('Quote: '.$quote->getId().'. Order is already locked. Throwing an error to the customer.');
             throw new LocalizedException(__(
                 'A server error stopped your order from being placed. Please try to place your order again.'
             ));
         }
         try {
+            $logger->info('Quote: '.$quote->getId().'. Locking the quote and placing the quote as inactive.');
             $this->lockManager->lock($lockedName, self::LOCK_TIMEOUT);
             $order = $this->orderManagement->place($order);
             $quote->setIsActive(false);
@@ -633,6 +652,7 @@
             $this->quoteRepository->save($quote);
             $this->lockManager->unlock($lockedName);
         } catch (\Exception $e) {
+            $logger->info('Quote: '.$quote->getId().'. An error occurred. Quote is being unlocked.'. $e->getMessage());
             $this->lockManager->unlock($lockedName);
             $this->rollbackAddresses($quote, $order, $e);
             throw $e;
