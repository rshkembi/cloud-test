diff --git a/vendor/magento/module-google-tag-manager/Observer/SendCookieOnCartActionCompleteObserver.php b/vendor/magento/module-google-tag-manager/Observer/SendCookieOnCartActionCompleteObserver.php
index 390bf71..ae65833 100644
--- a/vendor/magento/module-google-tag-manager/Observer/SendCookieOnCartActionCompleteObserver.php
+++ b/vendor/magento/module-google-tag-manager/Observer/SendCookieOnCartActionCompleteObserver.php
@@ -13,6 +13,7 @@
 use Magento\Framework\Stdlib\Cookie\CookieMetadataFactory;
 use Magento\Framework\Stdlib\CookieManagerInterface;
 use Magento\GoogleTagManager\Model\Config\TagManagerConfig;
+use Magento\Framework\UrlInterface;
 
 /**
  * Observer for Cart Changes
@@ -51,6 +52,8 @@
      */
     protected $cookieMetadataFactory;
 
+    protected $_urlInterface;
+
     /**
      * @param \Magento\GoogleTagManager\Helper\Data $helper
      * @param Registry $registry
@@ -65,6 +68,7 @@
         CookieManagerInterface $cookieManager,
         Data $jsonHelper,
         CookieMetadataFactory $cookieMetadataFactory,
+        UrlInterface $urlInterface,
         RequestInterface $httpRequest
     ) {
         $this->helper = $helper;
@@ -72,6 +76,7 @@
         $this->cookieManager = $cookieManager;
         $this->jsonHelper = $jsonHelper;
         $this->cookieMetadataFactory = $cookieMetadataFactory;
+        $this->_urlInterface = $urlInterface;
         $this->request = $httpRequest;
     }
 
@@ -84,31 +89,37 @@
      */
     public function execute(Observer $observer)
     {
-        if (!$this->helper->isTagManagerAvailable()) {
+        try {
+            if (!$this->helper->isTagManagerAvailable() || str_contains($this->_urlInterface->getCurrentUrl(), '/checkout/klarna/cookie/')) {
+                return $this;
+            }
+            $productsToAdd = $this->registry->registry('GoogleTagManager_products_addtocart');
+            $publicCookieMetadata = $this->cookieMetadataFactory->createPublicCookieMetadata()
+                ->setDuration(3600)
+                ->setPath('/')
+                ->setHttpOnly(false)
+                ->setSameSite('Strict');
+
+            if (!empty($productsToAdd) && !$this->request->isXmlHttpRequest()) {
+                $this->cookieManager->setPublicCookie(
+                    TagManagerConfig::GOOGLE_ANALYTICS_COOKIE_NAME,
+                    rawurlencode(json_encode($productsToAdd)),
+                    $publicCookieMetadata
+                );
+            }
+            $productsToRemove = $this->registry->registry('GoogleTagManager_products_to_remove');
+            if (!empty($productsToRemove && !$this->request->isXmlHttpRequest())) {
+                $this->cookieManager->setPublicCookie(
+                    TagManagerConfig::GOOGLE_ANALYTICS_COOKIE_REMOVE_FROM_CART,
+                    rawurlencode($this->jsonHelper->jsonEncode($productsToRemove)),
+                    $publicCookieMetadata
+                );
+            }
+            return $this;
+        } catch (\Error $e) {
+            return $this;
+        } catch (\Throwable $t) {
             return $this;
         }
-        $productsToAdd = $this->registry->registry('GoogleTagManager_products_addtocart');
-        $publicCookieMetadata = $this->cookieMetadataFactory->createPublicCookieMetadata()
-            ->setDuration(3600)
-            ->setPath('/')
-            ->setHttpOnly(false)
-            ->setSameSite('Strict');
-
-        if (!empty($productsToAdd) && !$this->request->isXmlHttpRequest()) {
-            $this->cookieManager->setPublicCookie(
-                TagManagerConfig::GOOGLE_ANALYTICS_COOKIE_NAME,
-                rawurlencode(json_encode($productsToAdd)),
-                $publicCookieMetadata
-            );
-        }
-        $productsToRemove = $this->registry->registry('GoogleTagManager_products_to_remove');
-        if (!empty($productsToRemove && !$this->request->isXmlHttpRequest())) {
-            $this->cookieManager->setPublicCookie(
-                TagManagerConfig::GOOGLE_ANALYTICS_COOKIE_REMOVE_FROM_CART,
-                rawurlencode($this->jsonHelper->jsonEncode($productsToRemove)),
-                $publicCookieMetadata
-            );
-        }
-        return $this;
     }
 }
